---
- name: Provision Custom Facts
  hosts: all
  tasks:
    - name: Create custom facts directory
      file: >
        path=/etc/ansible/facts.d
        recurse=yes
        state=directory
    - name: Install custom facts modules
      template: >
        src={{ item }}
        dest=/etc/ansible/facts.d/
        mode=0755
      with_fileglob:
        - facts.d/*
    - name: Reload ansible_local
      setup: filter=ansible_local

- name: System Checks
  hosts: all
  tasks:
    - name: Check hugepages support
      fail: msg="Hugepage support was not detected on your system.  Hugepage support is required for DPDK."
      when: ansible_local.hugepages.hugepages_1G == false and ansible_local.hugepages.hugepages_2M == false

- name: Install System Prerequisities
  hosts: all
  tasks:
    - name: Apply system updates
      dnf: name=* state=latest
      register: reboot_required
    - name: Install application prerequisites
      dnf: name='{{ item }}'
      with_items:
        - git
        - kernel-devel 
        - gcc-c++
        - libaio-devel
        - ninja-build
        - ragel
        - hwloc-devel
        - numactl-devel
        - libpciaccess-devel
        - cryptopp-devel
        - xen-devel
        - boost-devel
        - libxml2-devel
        - libubsan
        - libasan
    - name: Disable firewalld
      service: >
        name=firewalld
        enabled=no
        state=stopped

- name: Enable Hugepages
  hosts: all
  tasks:
    - name: Add configuration to GRUB - 1G
      lineinfile: >
        dest=/etc/default/grub 
        line='GRUB_CMDLINE_LINUX_DEFAULT="default_hugepagesz=1G hugepagesz=1G hugepages=1"' 
        insertafter=EOF
      register: grub_1G_changed
      when: ansible_local.hugepages.hugepages_1G == true
    - name: Add configuration to GRUB - 2M
      lineinfile: >
        dest=/etc/default/grub 
        line='GRUB_CMDLINE_LINUX_DEFAULT="default_hugepagesz=2M hugepagesz=2M hugepages=1"' 
        insertafter=EOF
      register: grub_2M_changed
      when: ansible_local.hugepages.hugepages_1G == false and ansible_local.hugepages.hugepages_2M == true
    - name: Update GRUB configuration
      command: grub2-mkconfig -o /etc/grub2-efi.cfg
      register: reboot_required
      when: grub_1G_changed.changed or grub_2M_changed.changed
    - name: Add hugepages mount to fstab - 1G
      lineinfile: >
        dest=/etc/fstab
        line='hugetlbfs    /dev/hugepages    hugetlbfs    pagesize=1G 0 0'
        insertafter=EOF
      when: ansible_local.hugepages.hugepages_1G == true
    - name: Add hugepages mount to fstab - 2M
      lineinfile: >
        dest=/etc/fstab
        line='hugetlbfs    /dev/hugepages    hugetlbfs    defaults 0 0'
        insertafter=EOF
      when: ansible_local.hugepages.hugepages_1G == false and ansible_local.hugepages.hugepages_2M == true

- name: Restart Machine (if required)
  hosts: all
  tasks:
    - name: Restart machine
      raw: 'sleep 5 && reboot "Ansible rebooting system" &'
      async: 0
      poll: 0
      ignore_errors: true
      when: reboot_required.changed
    - name: Waiting for machine to restart
      local_action: wait_for host='{{ inventory_hostname }}' port=22 delay=10
      sudo: false
      when: reboot_required.changed

- name: Install DPDK
  hosts: all
  tasks:
    - name: Checkout patched DPDK 
      git: >
        repo={{ dpdk_repo }}
        dest={{ dpdk_dir }}
        update=no
        force=yes
    - name: Configure DPDK
      lineinfile: >
        dest={{ dpdk_dir }}/config/common_linuxapp
        regexp=^{{ item.key }}=
        line={{ item.key }}={{ item.value }}
      with_items:
        - key: CONFIG_RTE_LIBTRE_KNI
          value: n
        - key: CONFIG_RTE_MBUF_REFCNT_ATOMIC
          value: n
        - key: CONFIG_RTE_MAX_MEMSEG
          value: 4096
      register: dpdk_config_change
    - name: Check if DPDK build exists
      stat: path={{ dpdk_build }}
      register: dpdk_build_status
    - name: Build DPDK
      command: make install T=x86_64-native-linuxapp-gcc chdir={{ dpdk_dir }}
      when: (dpdk_build_status.stat.isdir is not defined) or (dpdk_rebuild is defined) or dpdk_config_change.changed

- name: Install Seastar
  hosts: all
  tasks:
    - name: Checkout Seastar 
      git: >
        repo={{ seastar_repo }}
        dest={{ seastar_dir }}
        clone=no
        force=yes
        version={{ seastar_version | default("master") }}
      register: seastar_changed
    - name: Check if Seastar configuration exists
      stat: path={{ seastar_dir }}/build.ninja
      register: seastar_config_status
    - name: Configure Seastar
      command: ./configure.py --dpdk-target {{ dpdk_build }} --disable-xen --with apps/httpd/httpd chdir={{ seastar_dir }}
      when: seastar_config_status.stat.exists == false or (seastar_rebuild is defined) or seastar_changed.changed
    - name: Build Seastar
      command: '/usr/bin/ninja-build -f {{ seastar_dir }}/build.ninja chdir={{ seastar_dir }}'
      when: seastar_config_status.stat.exists == false or (seastar_rebuild is defined) or seastar_changed.changed


